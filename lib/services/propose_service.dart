import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/product.dart';

class ProposeService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Ghi l·∫°i l·ªãch s·ª≠ xem s·∫£n ph·∫©m c·ªßa ng∆∞·ªùi d√πng
  Future<void> logUserInteraction(String userId, String productId) async {
    //  print("üìå Ghi l·ªãch s·ª≠ xem cho userId: $userId, productId: $productId");
    try {
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('viewed_products')
          .doc(productId)
          .set({
        'timestamp': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print("L·ªói l∆∞u l·ªãch s·ª≠ xem s·∫£n ph·∫©m: $e");
    }
  }

  // L·∫•y danh s√°ch 5 s·∫£n ph·∫©m g·∫ßn nh·∫•t m√† user ƒë√£ xem
  Future<List<Product>> getLastViewedProducts(String userId) async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('viewed_products')
          .orderBy('timestamp', descending: true)
          .limit(5) // L·∫•y 5 s·∫£n ph·∫©m g·∫ßn nh·∫•t
          .get();

      // Ch·∫°y song song ƒë·ªÉ gi·∫£m th·ªùi gian truy v·∫•n Firestore
      List<Future<Product?>> futures = snapshot.docs.map((doc) async {
        var productDoc = await _firestore.collection('products').doc(doc.id).get();
        if (productDoc.exists) {
          return Product.fromMap(productDoc.data() as Map<String, dynamic>, productDoc.id);
        }
        return null;
      }).toList();

      List<Product> viewedProducts = (await Future.wait(futures)).whereType<Product>().toList();
      return viewedProducts;
    } catch (e) {
      print("L·ªói l·∫•y s·∫£n ph·∫©m g·∫ßn ƒë√¢y: $e");
      return [];
    }
  }

  // L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t
  Future<List<Product>> getRecommendedProducts(String userId) async {
    try {
      List<Product> lastViewedProducts = await getLastViewedProducts(userId);
      if (lastViewedProducts.isEmpty) return [];

      // L·ªçc danh m·ª•c v√† h√£ng
      Set<String> categories = {};
      Set<String> stores = {};
      for (var product in lastViewedProducts) {
        categories.add(product.category);
        stores.add(product.store);
      }

      // Gi·ªõi h·∫°n danh s√°ch tr√°nh l·ªói Firestore (max 10 ph·∫ßn t·ª≠ trong whereIn)
      List<String> categoryList = categories.take(10).toList();
      List<String> storeList = stores.take(10).toList();

      // L·∫•y s·∫£n ph·∫©m theo category
      Future<QuerySnapshot> categoryQuery = _firestore
          .collection('products')
          .where('category', whereIn: categoryList)
          .limit(10)
          .get();

      // L·∫•y s·∫£n ph·∫©m theo store
      Future<QuerySnapshot> storeQuery = _firestore
          .collection('products')
          .where('store', whereIn: storeList)
          .limit(10)
          .get();

      // Ch·∫°y song song ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
      List<QuerySnapshot> results = await Future.wait([categoryQuery, storeQuery]);

      // H·ª£p nh·∫•t k·∫øt qu·∫£, lo·∫°i b·ªè tr√πng l·∫∑p v√† s·∫£n ph·∫©m ƒë√£ xem
      Set<String> viewedIds = lastViewedProducts.map((p) => p.id).toSet();
      Set<String> addedIds = {};

      List<Product> recommendedProducts = [];
      for (var result in results) {
        for (var doc in result.docs) {
          if (!viewedIds.contains(doc.id) && !addedIds.contains(doc.id)) {
            recommendedProducts.add(Product.fromMap(doc.data() as Map<String, dynamic>, doc.id));
            addedIds.add(doc.id);
          }
        }
      }

      return recommendedProducts;
    } catch (e) {
      print("L·ªói l·∫•y s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t: $e");
      return [];
    }
  }
}
